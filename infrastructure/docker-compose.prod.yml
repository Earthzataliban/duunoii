version: '3.8'

services:
  api:
    build:
      context: ../api
      dockerfile: Dockerfile
    container_name: duunoii-api-prod
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET=${JWT_SECRET}
      - PORT=3001
    ports:
      - "3001:3001"
    volumes:
      - ../uploads:/app/uploads
    depends_on:
      - postgres
      - redis
    restart: unless-stopped

  web:
    build:
      context: ../web
      dockerfile: Dockerfile
    container_name: duunoii-web-prod
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
    ports:
      - "3000:3000"
    depends_on:
      - api
    restart: unless-stopped

  postgres:
    image: postgres:15
    container_name: duunoii-postgres-prod
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./backup:/backup
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: duunoii-redis-prod
    ports:
      - "6379:6379"
    volumes:
      - redis_prod_data:/data
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    container_name: duunoii-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
      - ../uploads:/var/www/uploads
    depends_on:
      - web
      - api
    restart: unless-stopped

volumes:
  postgres_prod_data:
  redis_prod_data: