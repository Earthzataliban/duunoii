name: Security Checks

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security checks weekly on Monday at 9 AM UTC
    - cron: '0 9 * * 1'

jobs:
  # CodeQL analysis for finding security vulnerabilities
  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript' ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  # Dependency vulnerability scanning
  dependency-check:
    name: Dependency Security Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm install
          cd api && npm install  
          cd ../web && npm install

      - name: Run npm audit (Root)
        run: npm audit --audit-level=moderate --production

      - name: Run npm audit (API)
        run: cd api && npm audit --audit-level=moderate --production

      - name: Run npm audit (Web)
        run: cd web && npm audit --audit-level=moderate --production

      - name: Check for known vulnerabilities with audit-ci
        run: npx audit-ci --moderate --production

  # License compatibility check
  license-check:
    name: License Compatibility
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm install
          cd api && npm install  
          cd ../web && npm install

      - name: Check licenses
        run: |
          npx license-checker --summary --production --excludePrivatePackages
          cd api && npx license-checker --summary --production --excludePrivatePackages
          cd ../web && npx license-checker --summary --production --excludePrivatePackages

  # Secret scanning (manual patterns)
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install truffleHog
        run: |
          curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin

      - name: Run secret scanning
        run: |
          trufflehog filesystem . --only-verified=false --fail
        continue-on-error: true

  # Docker image security scanning
  docker-security:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    needs: [dependency-check]
    if: github.ref == 'refs/heads/main'
    continue-on-error: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build API image
        run: |
          docker build -f infrastructure/Dockerfile.api -t duunoii-api:latest .

      - name: Build Web image
        run: |
          docker build -f infrastructure/Dockerfile.web -t duunoii-web:latest .

      - name: Run Trivy vulnerability scanner (API)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'duunoii-api:latest'
          format: 'sarif'
          output: 'trivy-api-results.sarif'

      - name: Upload Trivy scan results (API)
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-api-results.sarif'

      - name: Run Trivy vulnerability scanner (Web)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'duunoii-web:latest'
          format: 'sarif'
          output: 'trivy-web-results.sarif'

      - name: Upload Trivy scan results (Web)
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-web-results.sarif'